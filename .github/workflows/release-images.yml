name: Release Images

on:
  release:
    types: [published]

permissions:
  contents: read
  packages: write

jobs:
  build-and-push-scheduler:
    name: Build and push zyra-scheduler image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract tag/version
        id: vars
        shell: bash
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          VERSION="${TAG#v}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          PRERELEASE="false"
          if echo "$TAG" | grep -Eiq '(-rc|-beta|-alpha)'; then PRERELEASE="true"; fi
          echo "prerelease=${PRERELEASE}" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Wait for PyPI availability
        shell: bash
        run: |
          VERSION="${{ steps.vars.outputs.version }}"
          echo "Waiting for zyra $VERSION to appear on PyPI..."
          python - << 'PY'
import json, time, sys, urllib.request
pkg = "zyra"
version = "${{ steps.vars.outputs.version }}"
url = f"https://pypi.org/pypi/{pkg}/json"
for i in range(60):
    try:
        with urllib.request.urlopen(url, timeout=10) as r:
            data = json.load(r)
        if version in data.get("releases", {}) and data["releases"][version]:
            print(f"Found {pkg} {version} on PyPI.")
            sys.exit(0)
    except Exception as e:
        pass
    print("Not yet available; retrying in 10s...", flush=True)
    time.sleep(10)
print("Timed out waiting for PyPI release.")
sys.exit(1)
PY

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/zyra-scheduler
          tags: |
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable=${{ steps.vars.outputs.prerelease == 'false' }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/zyra-scheduler/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            ZYRA_VERSION=${{ steps.vars.outputs.version }}
          provenance: true
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-push-cli:
    name: Build and push zyra (CLI) image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract tag/version
        id: vars
        shell: bash
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          VERSION="${TAG#v}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          PRERELEASE="false"
          if echo "$TAG" | grep -Eiq '(-rc|-beta|-alpha)'; then PRERELEASE="true"; fi
          echo "prerelease=${PRERELEASE}" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Wait for PyPI availability
        shell: bash
        run: |
          VERSION="${{ steps.vars.outputs.version }}"
          echo "Waiting for zyra $VERSION to appear on PyPI..."
          python - << 'PY'
import json, time, sys, urllib.request
pkg = "zyra"
version = "${{ steps.vars.outputs.version }}"
url = f"https://pypi.org/pypi/{pkg}/json"
for i in range(60):
    try:
        with urllib.request.urlopen(url, timeout=10) as r:
            data = json.load(r)
        if version in data.get("releases", {}) and data["releases"][version]:
            print(f"Found {pkg} {version} on PyPI.")
            sys.exit(0)
    except Exception as e:
        pass
    print("Not yet available; retrying in 10s...", flush=True)
    time.sleep(10)
print("Timed out waiting for PyPI release.")
sys.exit(1)
PY

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/zyra
          tags: |
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable=${{ steps.vars.outputs.prerelease == 'false' }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/zyra/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            ZYRA_VERSION=${{ steps.vars.outputs.version }}
          provenance: true
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  scan-images:
    name: Scan images (Trivy)
    runs-on: ubuntu-latest
    needs: [build-and-push-scheduler, build-and-push-cli]
    steps:
      - name: Extract tag/version
        id: vars
        shell: bash
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Trivy scan zyra-scheduler
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/zyra-scheduler:${{ steps.vars.outputs.tag }}
          format: table
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'
          timeout: '10m'

      - name: Trivy scan zyra (CLI)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/zyra:${{ steps.vars.outputs.tag }}
          format: table
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'
          timeout: '10m'
