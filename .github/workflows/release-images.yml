name: Release Images

on:
  release:
    types: [published]

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build and push ${{ matrix.name }} image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: zyra-scheduler
            image: ghcr.io/${{ github.repository_owner }}/zyra-scheduler
            dockerfile: docker/zyra-scheduler/Dockerfile
          - name: zyra
            image: ghcr.io/${{ github.repository_owner }}/zyra
            dockerfile: docker/zyra/Dockerfile
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract tag/version
        id: vars
        uses: ./.github/actions/extract-release-vars
        with:
          ref: ${{ github.ref }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Wait for PyPI availability
        shell: bash
        run: |
          python3 scripts/wait_for_pypi.py zyra "${{ steps.vars.outputs.version }}"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata (${{ matrix.name }})
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable=${{ steps.vars.outputs.prerelease == 'false' }}

      - name: Build and push (${{ matrix.name }})
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            ZYRA_VERSION=${{ steps.vars.outputs.version }}
          provenance: true
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  scan-images:
    name: Scan images (Trivy)
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        image: [zyra-scheduler, zyra]
    steps:
      - name: Extract tag/version
        id: vars
        uses: ./.github/actions/extract-release-vars
        with:
          ref: ${{ github.ref }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Trivy scan ${{ matrix.image }}
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:${{ steps.vars.outputs.tag }}
          format: table
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'
          timeout: '10m'
