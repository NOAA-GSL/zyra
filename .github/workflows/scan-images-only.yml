name: Scan Images Only (Trivy)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Git tag to scan (e.g., v1.2.3)
        required: true
      image:
        description: Which image(s) to scan (both|zyra|zyra-scheduler)
        required: false
        default: both

permissions:
  contents: read
  packages: read

jobs:
  scan:
    name: Trivy scan ${{ matrix.image }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [zyra-scheduler, zyra]
    steps:
      - name: Compute lowercase owner
        id: owner
        shell: bash
        run: |
          echo "owner_lower=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
      - name: Select images
        id: filter
        shell: bash
        run: |
          sel='${{ inputs.image }}'
          build=true
          case "$sel" in
            both|"") build=true ;;
            zyra) if [ "${{ matrix.image }}" = "zyra" ]; then build=true; else build=false; fi ;;
            zyra-scheduler) if [ "${{ matrix.image }}" = "zyra-scheduler" ]; then build=true; else build=false; fi ;;
            *) echo "Unknown image selection: $sel" >&2; exit 1 ;;
          esac
          echo "build=$build" >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR
        if: steps.filter.outputs.build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Trivy scan ${{ matrix.image }}
        if: steps.filter.outputs.build == 'true'
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ghcr.io/${{ steps.owner.outputs.owner_lower }}/${{ matrix.image }}:${{ inputs.tag }}
          format: table
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'
          timeout: '10m'

      - name: Skip scan (manual selection)
        if: steps.filter.outputs.build != 'true'
        run: |
          echo "Skipping ${{ matrix.image }} per selection: ${{ inputs.image }}"
