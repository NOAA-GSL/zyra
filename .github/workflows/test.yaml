name: Run Tests

on:
  push:
    branches: ["main", "staging"]
    # optionally add tags if you want releases to run tests
    # tags: ["v*"]
  pull_request:
    branches: ["**"]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ruff)
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache Poetry cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Install dev dependencies
        run: poetry install --no-root --with dev

      - name: Ruff format check
        run: poetry run ruff format --check .

      - name: Ruff lint
        run: poetry run ruff check --output-format=github .

  test:
    name: Test with Coverage
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: src
      # Seed stdin for pipeline tests that read from '-' when CI does not pipe input
      DATAVIZHUB_DEFAULT_STDIN: tests/testdata/demo.nc
      # Verbose logs across all commands to surface subprocess errors in CI
      ZYRA_VERBOSITY: debug
      # Force thread-based parallel jobs in CI to avoid platform-specific
      # subprocess quirks while still validating parallel execution semantics
      ZYRA_WORKFLOW_PARALLEL_MODE: thread
      
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache Poetry cache and virtualenv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Install dependencies with Poetry (dev + API extras)
        run: poetry install --no-root --with dev -E api

      - name: Run tests with coverage
        run: |
          poetry run coverage erase
          poetry run pytest --cov=src --cov-branch --cov-report=xml --cov-report=term-missing -q

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
